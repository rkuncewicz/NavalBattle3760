/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Server.java
 *
 * Created on Nov 14, 2011, 10:25:41 AM
 */
//package server;

import java.util.ArrayList;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import java.util.Calendar; //:3789:2496
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author don
 */
public class Server extends javax.swing.JFrame {

    
    private String ipaddress = null;
    private int port = 0;
    ConnectionListener connectlistener = null;

    private static int numConnected = 0;
    private static int numReady = 0;

    private static boolean killServer = false;
    
    public static Timer maptimer;

    /** Creates new form Server */
    public Server() {
        GameData.initGameData(500, 400);
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        Calendar c = Calendar.getInstance();
        
        captainLogLabel.setText("Captain's Log stardate "+c.get(Calendar.YEAR)+"."+c.get(Calendar.DAY_OF_YEAR)+":");
        try {
            ipaddress = InetAddress.getLocalHost().getHostAddress();
        }catch(Exception e) {
            System.out.println("Geting Server IP ERROR: "+e.toString());
        }
        ipAddress.setText(ipaddress); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startServerButton = new javax.swing.JButton();
        stopServerButton = new javax.swing.JButton();
        ipLabel = new javax.swing.JLabel();
        ipAddress = new javax.swing.JLabel();
        maxminPanel = new javax.swing.JPanel();
        minPLabel = new javax.swing.JLabel();
        maxPLabel = new javax.swing.JLabel();
        minPTextField = new javax.swing.JTextField();
        maxPTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        errorTextArea = new javax.swing.JTextArea();
        connectReadyPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        connectPLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        readyPLabel = new javax.swing.JLabel();
        captainLogLabel = new javax.swing.JLabel();
        mapButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        startServerButton.setText("Start Server");
        startServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startServer(evt);
            }
        });

        stopServerButton.setText("Stop Server");
        stopServerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownServer(evt);
            }
        });

        ipLabel.setText("IP Address:");

        ipAddress.setText("0.0.0.0");

        minPLabel.setText("Min Players:");

        maxPLabel.setText("Max Players:");

        minPTextField.setText("2");

        maxPTextField.setText("20");

        javax.swing.GroupLayout maxminPanelLayout = new javax.swing.GroupLayout(maxminPanel);
        maxminPanel.setLayout(maxminPanelLayout);
        maxminPanelLayout.setHorizontalGroup(
            maxminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, maxminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(minPLabel)
                .addGap(2, 2, 2)
                .addComponent(minPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(maxPLabel)
                .addGap(2, 2, 2)
                .addComponent(maxPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        maxminPanelLayout.setVerticalGroup(
            maxminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, maxminPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(maxminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPLabel)
                    .addComponent(minPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxPLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        portLabel.setText("Port:");

        portTextField.setText("5283");

        errorTextArea.setColumns(20);
        errorTextArea.setRows(5);
        jScrollPane1.setViewportView(errorTextArea);
        errorTextArea.setWrapStyleWord(true);
        errorTextArea.setLineWrap(true);

        jLabel1.setText("Connected Players:");

        connectPLabel.setText("0");

        jLabel2.setText("Ready Players:");

        readyPLabel.setText("0");

        javax.swing.GroupLayout connectReadyPanelLayout = new javax.swing.GroupLayout(connectReadyPanel);
        connectReadyPanel.setLayout(connectReadyPanelLayout);
        connectReadyPanelLayout.setHorizontalGroup(
            connectReadyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectReadyPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectPLabel)
                .addGap(54, 54, 54)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readyPLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        connectReadyPanelLayout.setVerticalGroup(
            connectReadyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectReadyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel1)
                .addComponent(connectPLabel)
                .addComponent(jLabel2)
                .addComponent(readyPLabel))
        );

        captainLogLabel.setText("Captain's Log:");

        mapButton.setText("Map");
        mapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(startServerButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(portLabel)
                            .addComponent(ipLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ipAddress)
                            .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(stopServerButton)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(maxminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(connectReadyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(captainLogLabel)
                .addContainerGap(298, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addComponent(mapButton)
                .addGap(168, 168, 168))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startServerButton)
                    .addComponent(stopServerButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipLabel)
                    .addComponent(ipAddress))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxminPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(captainLogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(connectReadyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(mapButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        stopServerButton.setEnabled(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startServer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startServer
        int maxplayer = 0;
        int minplayer = 0;
        int portnum = 0;
        try{
            portnum = Integer.parseInt(portTextField.getText().trim());
            maxplayer = Integer.parseInt(maxPTextField.getText().trim());
            minplayer = Integer.parseInt(minPTextField.getText().trim());
        }catch(Exception e){
            displayError("Server Data Error: invalid input");
            return;
        }
        if(portnum != 5283){
            displayError("Server Data Error: invalid port number");
            return;
        }
        
        if(minplayer < 2){
            displayError("Server Data Error: invalid min player number, needs to be greater then or equal to 2");
            return;
        }
        
        connectlistener = new ConnectionListener(portnum,maxplayer,minplayer);
        connectlistener.start();
        startServerButton.setEnabled(false);
        stopServerButton.setEnabled(true);
        
    }//GEN-LAST:event_startServer

    private static void shutdownServer(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownServer
        serverShutDown();
    }//GEN-LAST:event_shutdownServer

    public static void serverShutDown(){
        WeatherAndTime.cancelTimers();
        killServer = true;

        //stop and clean up other stuff

        startServerButton.setEnabled(true);
        stopServerButton.setEnabled(false);        
    }
    
    private void mapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapButtonActionPerformed
        int width = 500;
        int height = 400;
        JFrame mapframe = new JFrame();
        mapframe.setSize(width, height);
        
        mapframe.addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent we){
                mapButton.setEnabled(true);
                maptimer.stop();
            }
        });
        
        mapframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        mapframe.setLocationRelativeTo(null);
        mapframe.add(new MapLoader(width,height));
        mapframe.setVisible(true);
        mapframe.setResizable(false);
        mapButton.setEnabled(false);
    }//GEN-LAST:event_mapButtonActionPerformed

    public static void displayError(String message){
        message = "ERROR:\n  "+message +"\n";
        errorTextArea.append(message);
        errorTextArea.setCaretPosition(errorTextArea.getDocument().getLength());
    }
    public static void displayLog(String message){
        message = "LOG:\n  "+message +"\n";
        errorTextArea.append(message);
        errorTextArea.setCaretPosition(errorTextArea.getDocument().getLength());
    }
    public static void displayWeather(String message){
        message = "ENVIRONMENT:\n  "+message +"\n";
        errorTextArea.append(message);
        errorTextArea.setCaretPosition(errorTextArea.getDocument().getLength());
    }    

    public static void incrementConnected(){
        numConnected++;
        connectPLabel.setText(String.valueOf(numConnected));
    }
    public static void decrementConnected(){
        numConnected--;
        connectPLabel.setText(String.valueOf(numConnected));
    }
    public static void incrementReady(){
        numReady++;
        readyPLabel.setText(String.valueOf(numReady));
    }
    public static void decrementReady(){
        numReady--;
        readyPLabel.setText(String.valueOf(numReady));
    }

    public static int getNumConnected(){
        return numConnected;
    }
    public static int getNumReady(){
        return numReady;
    }
    public static boolean getKillServer(){
        return killServer;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                Server servergui = new Server();
                servergui.setLocationRelativeTo(null);
                servergui.setVisible(true);
                
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel captainLogLabel;
    private static javax.swing.JLabel connectPLabel;
    private javax.swing.JPanel connectReadyPanel;
    private static javax.swing.JTextArea errorTextArea;
    private javax.swing.JLabel ipAddress;
    private javax.swing.JLabel ipLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mapButton;
    private javax.swing.JLabel maxPLabel;
    private javax.swing.JTextField maxPTextField;
    private javax.swing.JPanel maxminPanel;
    private javax.swing.JLabel minPLabel;
    private javax.swing.JTextField minPTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private static javax.swing.JLabel readyPLabel;
    private static javax.swing.JButton startServerButton;
    public static javax.swing.JButton stopServerButton;
    // End of variables declaration//GEN-END:variables

    
    public class MapLoader extends JPanel implements ActionListener {

        //private int delay = 2000;
        private static final int delay = 500;
        Polygon island[] = null;
        int w = 0;
        int h = 0;
        
        BufferedImage water;
        BufferedImage unscaledSloop;
        BufferedImage unscaledFrigate;
        BufferedImage unscaledManofwar;
        Image sloop;
        Image frigate;
        Image manofwar;
        
        private final Color grasscolor = new Color(50,131,31);
        AffineTransform tran = new AffineTransform();
        
        public MapLoader(int width,int height) {
            //import images
            this.w = width;
            this.h = height;
            island = GameData.getScaledPolygons();
            
            
            try {
                water = ImageIO.read(new File("./gameimage/water.png"));
                unscaledSloop = ImageIO.read(new File("./gameimage/sloop.png"));
                unscaledFrigate = ImageIO.read(new File("./gameimage/frigate.png"));
                unscaledManofwar = ImageIO.read(new File("./gameimage/manofwar.png"));
            } catch (IOException ex) {
                System.out.println("IMAGE ERROR: "+ex.toString());
            }

            sloop = unscaledSloop.getScaledInstance(2, 2, Image.SCALE_FAST);
            frigate = unscaledFrigate.getScaledInstance(2, 6, Image.SCALE_FAST);
            manofwar = unscaledManofwar.getScaledInstance(2, 8, Image.SCALE_FAST);

            maptimer = new Timer(delay,this);
            maptimer.start();
        }

        @Override
        public void actionPerformed(ActionEvent ae) {
            repaint();
        }
        
        @Override
        public void paint(Graphics g){
            g.clearRect(0,0,w,h);
            int x =0;
            int y = 0;
            for(int i=1; i < h;i++){
                for(int j=0;j < w;j++){
                    g.drawImage(water, x, y, this);
                    
                    x = x + 20;
                }
                y = y + 20;
                x = 0;
            }            
            g.setColor(grasscolor);
            for(int i =0;i<island.length;i++){
                g.fillPolygon(island[i]);
            }

            /*
            Graphics2D g2d = (Graphics2D)g;
            
            //tran.setToScale(0.9, 0.9);
            //tran.scale(2.0,2.0);
            tran.rotate(45,500,500);
            //g2d.setTransform(tran);
            g2d.drawImage(sloop, tran, this);
            g2d.drawString("GRRRRRR", 500,2000);
            */
            ArrayList<Player> list = ConnectionListener.playerList;
            Player player = null;

            if(list.size() > 0 && ConnectionListener.getGameStarted()){
                for(int i=0; i<list.size(); i++){
                    try {
                        player = list.get(i);
                    } catch(Exception e) {
                        System.out.println("Server.MapLoader.paint() ERROR: unable to get player"+i+": "+e.toString());
                    }
                    int pX=player.getX(), pY=player.getY();
                    pX = (int)(pX * 0.1);
                    pY = (int)(pY * 0.1);
                    //System.out.println("Server.MapLoader.paint(): Player"+i+" pos: pX="+pX+" pY="+pY);

                    switch(player.getShipType()){
                        //DC20111123//case(0): g.drawImage(sloop, pX, pY, this); break;
                        //DC20111123//case(1): g.drawImage(frigate, pX, pY, this); break;
                        //DC20111123//case(2): g.drawImage(manofwar, pX, pY, this); break;
                        case(0): g.drawImage(sloop, pX-1, pY-1, this); break; //DC20111123//
                        case(1): g.drawImage(frigate, pX-1, pY-3, this); break; //DC20111123//
                        case(2): g.drawImage(manofwar, pX-1, pY-4, this); break; //DC20111123//
                    }
                    g.setColor(Color.black);
                    g.drawString("p"+player.getShipID(), pX,pY);
                }
            } else {
                g.setColor(Color.black);
                g.drawString("These waters be calm",190,200);
            }
        }

    }
    
}
